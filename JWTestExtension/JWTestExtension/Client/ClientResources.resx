<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="htmlSiteMSDNAddress" xml:space="preserve">
    <value>http://msdn.microsoft.com</value>
  </data>
  <data name="ResourceBladeSubtitle" xml:space="preserve">
    <value>Resource Subtitle</value>
    <comment>Subtitle for my blade.</comment>
  </data>
  <data name="QuickStartBladeSubtitle" xml:space="preserve">
    <value>Quick Start Blade Subtitle</value>
  </data>
  <data name="QuickStartBladeTitle" xml:space="preserve">
    <value>Quick Start Blade Title</value>
  </data>
  <data name="QuickStartDescription" xml:space="preserve">
    <value>Quick Start Description</value>
  </data>
  <data name="QuickStartInfoListDesc1" xml:space="preserve">
    <value>This section has an Icon and will open a new browser tab on click. These two factors are mutually exclusive as the first depends on if an iconUri is set and the second because section.selectable was populated. This description text is multiline.</value>
  </data>
  <data name="QuickStartInfoListDesc2" xml:space="preserve">
    <value>PDL provides openBlades and links[] of the InfoListBladeLinkContract type will be opened in blades. The tile supports both blade links and hyperlinks in the same section. Numbers are used when iconUri is not set.</value>
  </data>
  <data name="QuickStartInfoListTitle1" xml:space="preserve">
    <value>Icon &amp; Selectable</value>
  </data>
  <data name="QuickStartInfoListTitle2" xml:space="preserve">
    <value>Section that opens blade</value>
  </data>
  <data name="QuickStartShortTitle" xml:space="preserve">
    <value>Quick Start</value>
  </data>
  <data name="QuickStartTitle" xml:space="preserve">
    <value>Quick Start</value>
  </data>
  <data name="PropertiesBladeTitle" xml:space="preserve">
    <value>Properties</value>
  </data>
  <data name="SubscriptionId" xml:space="preserve">
    <value>Subscription Id</value>
  </data>
  <data name="LoadingText" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="ResourceNameColumn" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ResourceLocationColumn" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="AssetTypeNames_Resource_plural" xml:space="preserve">
    <value>JW's Resources</value>
  </data>
  <data name="AssetTypeNames_Resource_singular" xml:space="preserve">
    <value>JW's Resource</value>
  </data>
  <data name="AssetTypeNames_Resource_lowerPlural" xml:space="preserve">
    <value>jw's resources</value>
  </data>
  <data name="AssetTypeNames_Resource_lowerSingular" xml:space="preserve">
    <value>jw's resource</value>
  </data>
  <data name="ExtensionName" xml:space="preserve">
    <value>JWTestExtension</value>
  </data>
  <data name="Subscription" xml:space="preserve">
    <value>Subscription</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="TextPropertyLabel" xml:space="preserve">
    <value>Text Property Label</value>
  </data>
  <data name="LinkPropertyLabel" xml:space="preserve">
    <value>Link Property Label</value>
  </data>
  <data name="MicrosoftUri" xml:space="preserve">
    <value>www.microsoft.com</value>
  </data>
  <data name="ResourceName" xml:space="preserve">
    <value>Resource Name for JW</value>
  </data>
  <data name="AssetPropertyNames_Resource_ResourceGroup" xml:space="preserve">
    <value>Resource group</value>
  </data>
  <data name="SelectResourceGroup" xml:space="preserve">
    <value>Select a resource group</value>
  </data>
  <data name="SelectSubscription" xml:space="preserve">
    <value>Select a subscription</value>
  </data>
  <data name="AssetPropertyNames_CloudService_Location" xml:space="preserve">
    <value>Location</value>
  </data>
  <data name="EnterTheName" xml:space="preserve">
    <value>Enter the name</value>
    <comment>Ghost text for the Resource name in create textbox field</comment>
  </data>
  <data name="SelectLocation" xml:space="preserve">
    <value>Select a location</value>
  </data>
  <data name="ResourceNameRequired" xml:space="preserve">
    <value>The resource name is required</value>
    <comment>Required field validation text for create textbox</comment>
  </data>
  <data name="MonitoringLensTitle" xml:space="preserve">
    <value>Monitoring</value>
  </data>
</root>