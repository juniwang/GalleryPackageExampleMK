/**
 * @file Source code generated by PDL compiler.
 * @version 1.0
 * @sdkversion 5.0.302.607 (production_sdk#ffbfc5d.170130-1133)
 * @schemaversion 1.0.0.2
 */
/// <reference path="../TypeReferences.d.ts" />

import ExtensionDefinition = require ("./ExtensionDefinition");
import FxCompositionBlade = require ("Fx/Composition/Blade");
import Assettypeviewmodel = require ("../Browse/ViewModels/AssetTypeViewModel");
import Createbladeviewmodel = require ("../Resource/Create/ViewModels/CreateBladeViewModel");
import Quickstartinfolistviewmodel = require ("../QuickStart/ViewModels/QuickStartInfoListViewModel");
import Quickstartbladeviewmodel = require ("../QuickStart/ViewModels/QuickStartBladeViewModel");
import Resourcesummarypartviewmodel = require ("../Resource/Summary/ViewModels/ResourceSummaryPartViewModel");
import Resourcebladeviewmodel = require ("../Resource/Summary/ViewModels/ResourceBladeViewModel");
import Propertiespartviewmodel = require ("../Resource/Properties/ViewModels/PropertiesPartViewModel");
import Propertiesbladeviewmodel = require ("../Resource/Properties/ViewModels/PropertiesBladeViewModel");
import Resourcepartviewmodel = require ("../Browse/ViewModels/ResourcePartViewModel");
import Quickstartpartviewmodel = require ("../QuickStart/ViewModels/QuickStartPartViewModel");
import QuickStart = require ("./../QuickStart/QuickStartArea");
import Browse = require ("./../Browse/BrowseArea");
import Resource = require ("./../Resource/ResourceArea");
export = ViewModelFactories;
module ViewModelFactories {
    export class QuickStartViewModelFactoriesBase extends FxImpl.Extension.ViewModelAreaFactoriesBase<QuickStart.DataContext> implements ExtensionDefinition.QuickStartViewModelFactories,ExtensionDefinition.QuickStartDataContextContainer {
        public QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Quickstartpartviewmodel, ExtensionDefinition.QuickStart$QuickStartPartViewModel$Contract>(
            "../QuickStart/ViewModels/QuickStartPartViewModel",
            (providerModule) => new providerModule.QuickStartPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Quickstartbladeviewmodel, ExtensionDefinition.QuickStart$QuickStartBladeViewModel$Contract>(
            "../QuickStart/ViewModels/QuickStartBladeViewModel",
            (providerModule) => new providerModule.QuickStartBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public QuickStartInfoListViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartInfoListViewModel$Contract> {
            return this.loadViewModelAsync<typeof Quickstartinfolistviewmodel, ExtensionDefinition.QuickStart$QuickStartInfoListViewModel$Contract>(
            "../QuickStart/ViewModels/QuickStartInfoListViewModel",
            (providerModule) => new providerModule.QuickStartInfoListViewModel(container, initialState, this.dataContext),
            require);
        }
    }
    export class BrowseViewModelFactoriesBase extends FxImpl.Extension.ViewModelAreaFactoriesBase<Browse.DataContext> implements ExtensionDefinition.BrowseViewModelFactories,ExtensionDefinition.BrowseDataContextContainer {
        public ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$ResourcePartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcepartviewmodel, ExtensionDefinition.Browse$ResourcePartViewModel$Contract>(
            "../Browse/ViewModels/ResourcePartViewModel",
            (providerModule) => new providerModule.ResourcePartViewModel(container, initialState, this.dataContext),
            require);
        }
        public AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$AssetTypeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Assettypeviewmodel, ExtensionDefinition.Browse$AssetTypeViewModel$Contract>(
            "../Browse/ViewModels/AssetTypeViewModel",
            (providerModule) => new providerModule.AssetTypeViewModel(container, initialState, this.dataContext),
            require);
        }
    }
    export class ResourceViewModelFactoriesBase extends FxImpl.Extension.ViewModelAreaFactoriesBase<Resource.DataContext> implements ExtensionDefinition.ResourceViewModelFactories,ExtensionDefinition.ResourceDataContextContainer {
        public PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Propertiesbladeviewmodel, ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract>(
            "../Resource/Properties/ViewModels/PropertiesBladeViewModel",
            (providerModule) => new providerModule.PropertiesBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Propertiespartviewmodel, ExtensionDefinition.Resource$PropertiesPartViewModel$Contract>(
            "../Resource/Properties/ViewModels/PropertiesPartViewModel",
            (providerModule) => new providerModule.PropertiesPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcebladeviewmodel, ExtensionDefinition.Resource$ResourceBladeViewModel$Contract>(
            "../Resource/Summary/ViewModels/ResourceBladeViewModel",
            (providerModule) => new providerModule.ResourceBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcesummarypartviewmodel, ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract>(
            "../Resource/Summary/ViewModels/ResourceSummaryPartViewModel",
            (providerModule) => new providerModule.ResourceSummaryPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public CreateBladeViewModel(container: FxCompositionBlade.Container, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CreateBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Createbladeviewmodel, ExtensionDefinition.Resource$CreateBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/CreateBladeViewModel",
            (providerModule) => new providerModule.CreateBladeViewModel(container, initialState, this.dataContext),
            require);
        }
    }
    function getQuickStart(viewModelFactories: ExtensionDefinition.ViewModelFactories): ExtensionDefinition.QuickStartViewModelFactories {
        return viewModelFactories.QuickStart();
    }
    function getBrowse(viewModelFactories: ExtensionDefinition.ViewModelFactories): ExtensionDefinition.BrowseViewModelFactories {
        return viewModelFactories.Browse();
    }
    function getResource(viewModelFactories: ExtensionDefinition.ViewModelFactories): ExtensionDefinition.ResourceViewModelFactories {
        return viewModelFactories.Resource();
    }
    export class ViewModelFactoriesBase implements ExtensionDefinition.ViewModelFactories {
        private _QuickStartViewModelFactories: ExtensionDefinition.QuickStartViewModelFactories;
        public SetQuickStartViewModelFactories(factories: ExtensionDefinition.QuickStartViewModelFactories): void {
            this._QuickStartViewModelFactories = factories;
        }
        public QuickStart(): ExtensionDefinition.QuickStartViewModelFactories {
            this._QuickStartViewModelFactories = this._QuickStartViewModelFactories || new QuickStartViewModelFactoriesBase();
            return this._QuickStartViewModelFactories;
        }
        public QuickStart$QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartPartViewModel$Contract> {
            return getQuickStart(this).QuickStartPartViewModel(container, initialState);
        }
        private _BrowseViewModelFactories: ExtensionDefinition.BrowseViewModelFactories;
        public SetBrowseViewModelFactories(factories: ExtensionDefinition.BrowseViewModelFactories): void {
            this._BrowseViewModelFactories = factories;
        }
        public Browse(): ExtensionDefinition.BrowseViewModelFactories {
            this._BrowseViewModelFactories = this._BrowseViewModelFactories || new BrowseViewModelFactoriesBase();
            return this._BrowseViewModelFactories;
        }
        public Browse$ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$ResourcePartViewModel$Contract> {
            return getBrowse(this).ResourcePartViewModel(container, initialState);
        }
        private _ResourceViewModelFactories: ExtensionDefinition.ResourceViewModelFactories;
        public SetResourceViewModelFactories(factories: ExtensionDefinition.ResourceViewModelFactories): void {
            this._ResourceViewModelFactories = factories;
        }
        public Resource(): ExtensionDefinition.ResourceViewModelFactories {
            this._ResourceViewModelFactories = this._ResourceViewModelFactories || new ResourceViewModelFactoriesBase();
            return this._ResourceViewModelFactories;
        }
        public Resource$PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract> {
            return getResource(this).PropertiesBladeViewModel(container, initialState);
        }
        public Resource$PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesPartViewModel$Contract> {
            return getResource(this).PropertiesPartViewModel(container, initialState);
        }
        public Resource$ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceBladeViewModel$Contract> {
            return getResource(this).ResourceBladeViewModel(container, initialState);
        }
        public Resource$ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract> {
            return getResource(this).ResourceSummaryPartViewModel(container, initialState);
        }
        public QuickStart$QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartBladeViewModel$Contract> {
            return getQuickStart(this).QuickStartBladeViewModel(container, initialState);
        }
        public QuickStart$QuickStartInfoListViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.QuickStart$QuickStartInfoListViewModel$Contract> {
            return getQuickStart(this).QuickStartInfoListViewModel(container, initialState);
        }
        public Resource$CreateBladeViewModel(container: FxCompositionBlade.Container, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CreateBladeViewModel$Contract> {
            return getResource(this).CreateBladeViewModel(container, initialState);
        }
        public Browse$AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$AssetTypeViewModel$Contract> {
            return getBrowse(this).AssetTypeViewModel(container, initialState);
        }
    }
}
