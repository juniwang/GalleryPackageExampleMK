/**
 * @file Source code generated by PDL compiler.
 * @version 1.0
 * @sdkversion 5.0.302.607 (production_sdk#ffbfc5d.170130-1133)
 * @schemaversion 1.0.0.2
 */
/// <reference path="../TypeReferences.d.ts" />

import Icons = require ("../Shared/Icons");
import ClientResources = require ("ClientResources");
import FxCompositionBlade = require ("Fx/Composition/Blade");
import QuickStart = require ("./../QuickStart/QuickStartArea");
import Browse = require ("./../Browse/BrowseArea");
import Resource = require ("./../Resource/ResourceArea");
export = ExtensionDefinition;
module ExtensionDefinition {
    module Internal {
        var untypedDefinition: any = {
  "commandsCatalog": [],
  "name": "JWTestExtension",
  "version": "1.0",
  "hash": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
  "schemaVersion": "1.0.0.2",
  "sdkVersion": "5.0.302.607 (production_sdk#ffbfc5d.170130-1133)",
  "commandGroups": [
    {
      "name": "MoveResource",
      "commands": [
        {
          "name": "MoveResourceCommand",
          "reference": {
            "commandType": "MoveResourceCommand",
            "extension": "HubsExtension"
          },
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 5,
                  "property": "constant_overrideInBlade",
                  "constantValue": "overrideInBlade"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "htmlTemplates": {},
  "styleSheets": []
};
        export var definition: MsPortalFx.Extension.Definition = untypedDefinition;
    }
    export var definitionName: string = "JWTestExtension";
    export function getDefinition(): MsPortalFx.Extension.Definition {
        if (Internal.definition) {
                            var def = Internal.definition;
                            Internal.definition = null;
                            return def;
                        }

                    throw new Error("Extension definition is no longer available.");
    }
    export module External {
        export module HubsExtension {
            export var name: string = "HubsExtension";
            export module Blades {
                export module UnauthorizedAssetBlade {
                    export var name: string = "UnauthorizedAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module NotFoundAssetBlade {
                    export var name: string = "NotFoundAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module UnavailableAssetBlade {
                    export var name: string = "UnavailableAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module NoCreateFlowBlade {
                    export var name: string = "NoCreateFlowBlade";
                    export module Inputs {
                        export var marketplaceItemId: string = "marketplaceItemId";
                    }
                    export module Outputs {
                    }
                }
                export module Resources {
                    export var name: string = "Resources";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module BrowseAllResourcesBlade {
                    export var name: string = "BrowseAllResourcesBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module BrowseResourceBlade {
                    export var name: string = "BrowseResourceBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module BrowseInstanceLinkBlade {
                    export var name: string = "BrowseInstanceLinkBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module BrowseResourceGroupBlade {
                    export var name: string = "BrowseResourceGroupBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module MapResourceGroupBlade {
                    export var name: string = "MapResourceGroupBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module ResourceGroupPickerV3Blade {
                    export var name: string = "ResourceGroupPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module DeployFromTemplateBlade {
                    export var name: string = "DeployFromTemplateBlade";
                    export module Inputs {
                        export var internal_bladeCallerParams: string = "internal_bladeCallerParams";
                    }
                    export module Outputs {
                    }
                }
                export module ParametersEditorBlade {
                    export var name: string = "ParametersEditorBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module TemplateEditorBlade {
                    export var name: string = "TemplateEditorBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module LocationPickerV3Blade {
                    export var name: string = "LocationPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module DeploymentDetailsBlade {
                    export var name: string = "DeploymentDetailsBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module ResourceGroupMapBlade {
                    export var name: string = "ResourceGroupMapBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module ResourceMenuBlade {
                    export var name: string = "ResourceMenuBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module ServicesHealthBlade {
                    export var name: string = "ServicesHealthBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module SettingsBlade {
                    export var name: string = "SettingsBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module SubscriptionPickerV3Blade {
                    export var name: string = "SubscriptionPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module DeployToAzure {
                    export var name: string = "DeployToAzure";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
            }
        }
        export module Microsoft_Azure_AD {
            export var name: string = "Microsoft_Azure_AD";
            export module Blades {
                export module SelectMember {
                    export var name: string = "SelectMember";
                    export module Inputs {
                        export var collectorBindingInternals_inputs: string = "collectorBindingInternals-inputs";
                        export var collectorBindingInternals_errors: string = "collectorBindingInternals-errors";
                        export var stepInput: string = "stepInput";
                    }
                    export module Outputs {
                        export var collectorBindingInternals_outputs: string = "collectorBindingInternals-outputs";
                        export var collectorBindingInternals_commit: string = "collectorBindingInternals-commit";
                        export var stepOutput: string = "stepOutput";
                    }
                }
                export module SelectMemberV3 {
                    export var name: string = "SelectMemberV3";
                    export module Inputs {
                        export var title: string = "title";
                        export var subtitle: string = "subtitle";
                    }
                    export module Outputs {
                    }
                }
                export module RolesListBlade {
                    export var name: string = "RolesListBlade";
                    export module Inputs {
                        export var scope: string = "scope";
                    }
                    export module Outputs {
                    }
                }
                export module UserAssignmentsBlade {
                    export var name: string = "UserAssignmentsBlade";
                    export module Inputs {
                        export var scope: string = "scope";
                    }
                    export module Outputs {
                    }
                }
            }
        }
    }
    export module AssetTypes {
        export module MyResource {
            export var name: string = "MyResource";
        }
    }
    export module AssetTypeNames {
        export var myResource: string = AssetTypes.MyResource.name;
    }
    export module BladeNames {
        export var propertiesBlade: string = "PropertiesBlade";
        export var resourceBlade: string = "ResourceBlade";
        export var quickStartBlade: string = "QuickStartBlade";
        export var createBlade: string = "CreateBlade";
    }
    export module CommandGroupNames {
        export var moveResource: string = "MoveResource";
    }
    export module EventTypes {
    }
    export module NotificationDefinitions {
    }
    export declare module ViewModels {
        export module QuickStart {
            export module QuickStartPartViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.QuickStartPart {
                }
            }
            export module QuickStartBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                }
            }
            export module QuickStartInfoListViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.InfoList.ViewModel {
                }
            }
        }
        export module Browse {
            export module ResourcePartViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.AssetPart {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    assetId: any;
                }
            }
            export module AssetTypeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.Assets.ResourceMenuConfigContract {
                }
            }
        }
        export module Resource {
            export module PropertiesBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module PropertiesPartViewModel {
                export interface InputsContract {
                    id: any;
                    actionBarOutput?: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.Properties.Contract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    moveResourceSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                }
            }
            export module ResourceBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module ResourceSummaryPartViewModel {
                export interface InputsContract {
                    resourceId: any;
                    actionBarOutput?: any;
                }
                export interface Settings$content$0 {
                    collapsed: any;
                }
                export interface SettingsContract {
                    content?: Settings$content$0;
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.ResourceSummary.Contract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    selection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    asyncSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    tagsSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    accessSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    settingsSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    quickStartSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    keysSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    moveResourceSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                }
            }
            export module CreateBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    actionBar: MsPortalFx.ViewModels.ActionBars.Base.Contract;
                    parameterProvider: MsPortalFx.ViewModels.ParameterProvider<any, any>;
                }
            }
        }
    }
    export interface QuickStart$QuickStartPartViewModel$Contract extends ViewModels.QuickStart.QuickStartPartViewModel.Contract {
    }
    export interface Browse$ResourcePartViewModel$Contract extends ViewModels.Browse.ResourcePartViewModel.Contract {
    }
    export interface Resource$PropertiesBladeViewModel$Contract extends ViewModels.Resource.PropertiesBladeViewModel.Contract {
    }
    export interface Resource$PropertiesPartViewModel$Contract extends ViewModels.Resource.PropertiesPartViewModel.Contract {
    }
    export interface Resource$ResourceBladeViewModel$Contract extends ViewModels.Resource.ResourceBladeViewModel.Contract {
    }
    export interface Resource$ResourceSummaryPartViewModel$Contract extends ViewModels.Resource.ResourceSummaryPartViewModel.Contract {
    }
    export interface QuickStart$QuickStartBladeViewModel$Contract extends ViewModels.QuickStart.QuickStartBladeViewModel.Contract {
    }
    export interface QuickStart$QuickStartInfoListViewModel$Contract extends ViewModels.QuickStart.QuickStartInfoListViewModel.Contract {
    }
    export interface Resource$CreateBladeViewModel$Contract extends ViewModels.Resource.CreateBladeViewModel.Contract {
    }
    export interface Browse$AssetTypeViewModel$Contract extends ViewModels.Browse.AssetTypeViewModel.Contract {
    }
    export interface QuickStartDataContextContainer extends FxImpl.Extension.DataContextContainer<QuickStart.DataContext> {
    }
    export interface QuickStartViewModelFactories extends QuickStartDataContextContainer {
        QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<QuickStart$QuickStartPartViewModel$Contract>;
        QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<QuickStart$QuickStartBladeViewModel$Contract>;
        QuickStartInfoListViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<QuickStart$QuickStartInfoListViewModel$Contract>;
    }
    export interface BrowseDataContextContainer extends FxImpl.Extension.DataContextContainer<Browse.DataContext> {
    }
    export interface BrowseViewModelFactories extends BrowseDataContextContainer {
        ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Browse$ResourcePartViewModel$Contract>;
        AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Browse$AssetTypeViewModel$Contract>;
    }
    export interface ResourceDataContextContainer extends FxImpl.Extension.DataContextContainer<Resource.DataContext> {
    }
    export interface ResourceViewModelFactories extends ResourceDataContextContainer {
        PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$PropertiesBladeViewModel$Contract>;
        PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$PropertiesPartViewModel$Contract>;
        ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ResourceBladeViewModel$Contract>;
        ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ResourceSummaryPartViewModel$Contract>;
        CreateBladeViewModel(container: FxCompositionBlade.Container, initialState?: any): MsPortalFx.Base.PromiseV<Resource$CreateBladeViewModel$Contract>;
    }
    export interface ViewModelFactories {
        QuickStart(): ExtensionDefinition.QuickStartViewModelFactories;
        Browse(): ExtensionDefinition.BrowseViewModelFactories;
        Resource(): ExtensionDefinition.ResourceViewModelFactories;
    }
}
